{"componentChunkName":"component---src-templates-post-tsx","path":"/posts/cutt/","result":{"data":{"site":{"siteMetadata":{"title":"Raptazure","description":"Meditation","author":{"name":"raptazure","twitter":"https://twitter.com/raptazure","github":"https://github.com/raptazure"}}},"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Cubical Type\",\n  \"date\": \"2020-12-13T00:00:00.000Z\",\n  \"tags\": [\"type theory\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Part I.\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"What is cubical type theory?\")), mdx(\"p\", null, \"It is a type theory giving homotopy type theory its computational meaning.\"), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"What is homotopy type theory then?\")), mdx(\"p\", null, \"It is traditional type theory (which refers to Martin-L\\xF6f type theory in this context) augmented with higher inductive types and the univalence axiom.\"), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"So what are HIT and UA?\")), mdx(\"p\", null, \"A HIT is a type equipped with custom equality. As an example, you can write a type similar to the natural numbers but with some equality between all even numbers. Well, it cannot be called natural numbers then.\"), mdx(\"ol\", {\n    \"start\": 4\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"And UA?\")), mdx(\"p\", null, \"It gives the universe the strongest possible equality in advance, because we do not define another universe.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"To be continued\\u2026\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Part I. What is cubical type theory? It is a type theory giving homotopy type theory its computational meaning. What is homotopy type theoryâ€¦","fields":{"lang":"zh-Hans"},"frontmatter":{"title":"Cubical Type","date":"2020-12-13","tags":["type theory"]}}},"pageContext":{"slug":"/posts/cutt/"}},"staticQueryHashes":["2345487092"]}